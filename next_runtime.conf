system:
  daemon-port: @DAEMON_PORT@
  daemon-host: 0.0.0.0
  generation: gen1

daemon:
  debug: false
  elrond:
    path: elrond
    first-port: @ELROND_PORT@
    count: 1
  simulator:
  - port: @SIMULATOR_PORT@
  # Enable eventlog: a trace for system events
  enable-eventlog: true

  # device-init:
  # Set to change to override DRAM initialization binary: (default: ../lib/firmware/nextsilicon/sbus_master.hbm2e.0x000c_1032.rom)
  #   dram-rom-path: <path>
  # Set to change default pattern DRAM memory is set to after being initialized (default: 0x00000000)
  #   dram-default-pattern: <value>
  # Uncomment lines below to skip device configuration state.
  # Changing these may affect system performance and stability!
  #   skip-host-ghi: true
  #   skip-bins: true
  #   skip-grid-pll: true
  #   skip-hbm: true

  # RISC settings.
  # risc:
  #   Set to activate RISC complexes: (default: both)
  #   In SCU-only mode, a complex will be initialized for SCU execution,
  #   but no cores will be available to elrond, and MNG services will not function.
  #   mode: default | none | scu-only | east | west | both
  #   Set to change firmware binary to be loaded at runtime: (default: ../nextrisc/bin/mngfw[p].bin)
  #   firmware-path: <path>
  #   Set to readback firmware upon upload and check its contents: (default: false)
  #   verified-upload: <value>
  #   Do not use HBM as MNG channel backing memory: (default: false)
  #   mng-private-mode: <value>
  #   Use native emulation for uemu blocks (and type of support, default: enabled/x86-simulated [device/direct-mode]):
  #   native-support: default | none | enabled | x86-simulated

  # SCU (system control unit) settings.
  # Changing these may affect system performance and stability!
  # scu:
  #   Set to change SCU mode: (default: protection)
  #   mode: default | disabled | protection
  #   Set to change core reserved for SCU: (default: 1)
  #   core: <value>
  #   Set to change sampling frequency: (default: 1000.0Hz)
  #   sample-frequency: <value>
  #   Set to change protection threshold temperature: (default: 80.0C)
  #   protection-threshold: <value>

execution:
  deploy-scheme:
    # Assign mill peripheral BBGs to host/risc (default: risc):
    mill-peripheral: default
    # Assign mill core BBGs to host/risc/grid (default: grid):
    mill-core: default

  # Enables or disables the use of nextuvm
  enable-uvm: true

  # device-telemetry:
  #   Telemetry sample interval in milliseconds: (default: 1000)
  #   sample-interval: <value>
  #
  #   gmu:
  #     Each latency bucket will be of size 2^n cycles where n is the value
  #     of this field. 0 means disable.
  #     Nonzero values must be between 2 and 10: (default: 0)
  #     mep-latency-bucket-size: <value>
  #
  #     Enable hardware gmu telemetry collection: (default: enabled)
  #     enable: default | disabled | enabled
  #
  #     0 - MEP: requests, responses, backpressure to GCU, MIU backpressure
  #         BIN: miss, backpressure to MIU REQ and from MIU RSP,
  #              dlink backpressure, HIT or FIP
  #         MMU: hit, miss
  #     1 - MEP: split, unaligned
  #         BIN: fetch, fill, hit, fip, scratchpad, miss_no_alloc, hit or fip
  #         MMU: hit, miss
  #     2 - 16 bins aggregating different rtts. bin size is defined by
  #         mep-latency-bucket-size.
  #     Choose the mem counters you want to collect:
  #     (default: custom. Defined in TELEM_GMU_SRC_DEFAULT_CFG)
  #     global-telem-mode: default | mode_0 | mode_1 | mode_rtt | custom
  #     #EXAMPLE: counter-0: mode_0 | mode_1 | default
  #     telem-mode-custom:
  #       All counters custom configuration below:
  #       counter-0: mode_1
  #       counter-1: mode_1
  #       ...
  #       counter-21: mode_0

  # Set to ignore mill thread limits, as configured by the optimizer. (default: false)
  # ignore-thread-limits: <value>

projection:
  # pre-process:
    # enable-queue-redirection: false
    # disable-bbg-split: false

  use-next-research: false
  # disjoint-windows-plan: false
  # Limits the number of process project.py can use
  # workers-limit: 16
  # Projection mode - (default: regular)
  # mode: default | regular | cluster-based

elrond:
  optimizer: true
  simulator:
  #   To enable jitting while running BBGs not on grid/device, set to true, otherwise set to false.
  #   This comes into effect for all BBGs when running without hardware and on unlikely BBGs when running with a device
    jit: true
  #
  #   To save jit coredump set the dump path. This will save a BBG if the lifter failed to compile it.
  #   jit-coredump: $NEXT_HOME/var/log/nextsilicon/
  #
  #   To enable jitted code to be interrupted and report telemetry at loop head,
  #   set the following value to a non-zero value. After every <value> static jumps,
  #   the interrupt callback will be called. Note that this will cause a slowdown
  #   for values closer to zero.
    interrupt-threshold: 1000
  #
  #   To set the maximum number of simulator threads that will run at the same
  #   time, uncomment the next line and set the number:
  #   threads: <num>
  #
  #   To limit device memory size in the software simulator, set the desired
  #   devmem size here, in amounts of clusters (256MB). If left unset, a full
  #   silicon layout will be used, enabling 64GiB of device memory. This value
  #   cannot be more than 256 (full silicon layout).
  #   When not running in software simulator, this setting is ignored.
  #   memory-clusters: <value>
    cachesim:
      #  To enable cache simulator use gen1 or gen2 as the mode.
      mode: disabled
      #
      # To get a human readable cachesim report set its path below
      # info-log-path : $NEXT_HOME/cs.log
      #
      # To get a machine readable cachesim report set its path below
      # json-log_path : $NEXT_HOME/cs.json.log
      #
      # Number of wall clock seconds between each report
      # report-interval : <num>
  #
  # enable eventlog: a trace for system events
  enable-eventlog: true
  # disable builtins: Don't load from ../etc/codegraph_builtins
  disable-builtins: false
  #
  # In order to disable mem-trap uncomment the line `disable-mem-trap: <value>` and
  # replace `<value>` with `true`.
  # disable-mem-trap: <value>
  #
  # In order to disable inclusion of mtrap memory in core dumps, set to false.
  # Note that device memory will not be included in core dumps regardless of the
  # value supplied here due to technical limitations.
  mtrap-in-core-dumps: true
  #
  # To set source path substitution, uncomment the following lines and apply the
  # pairs of paths (first to replace, the second the replacement) separated by a
  # colon:
  # source-path-sub:
  # - /from/sample/dir:/to/sample/dir
  # - /another/sample/dir:/to/another/sample/location
  # - ...
  #
  # To stop Elrond on (somewhat) recoverable errors (recommended to be set on
  #   test environments):
  # strict: true
  #
  # To enable or disable control-plane handoffs, which causes the interception
  # and injection of certain functions for internal next control-plane purposes,
  # set the following setting. Possible values are true/false
  control-plane-handoffs: true
  #
  # The memory allocation policy for the memory manager.
  # Possible values:
  # - `default`: If running with a device use `migrate-one-way`, otherwise use
  #              `host-only`
  # - `host-only`: All memory is allocated on the host. Can be used for
  #                testing without device memory constraints.
  # - `device-only`: All memory is allocated on the device.
  # - `migrate-one-way`: Memory can be allocated either on host or on device.
  #                Host memory is migrated to device on first device access,
  #                but device memory is never migrated to host.
  mmu-policy: default
  #
  # To set thread stack size (in bytes)
  # thread-stack-size: 0x20000
  # To change libcall load policy, which controls how libcall implementations
  # are loaded into Codegraph from disk, set this value to:
  # - `compliant-only` (the default): Allow only IEEE-compliant implementations.
  # - `prefer-fast`: Prefer selecting fast versions (no-NaNs, no-Infs,
  #   flush-to-zero, denormals-are-zero) if available, otherwise fall back to
  #   IEEE-compliant implementations.
  # libcall-load-policy: compliant-only
  #
  # To disable the MMU, set the following value to true. This will cause all
  # memory allocations to be served directly from linear memory.
  # disable-mmu: <value>
  #
  # In order to enable or disable function overlays, which replaces some
  # non-libcall functions with ns-optimized implementations of them, set the
  # following value to true/false.
  enable-overlay: true

loader5:
  use_ld_so_plugin: false

codegraph_db:
  remove-unused: true
  # Libcalls mode can be one of the following values:
  # - legacy
  # - gen1 (Default if not provided)
  # - gen2
  libcalls-mode: gen1
  feeder-optimization:
    feeder-recalculation:
      disable: false
      depth-limit: 4
      added-compute-limit: 20
    feeder-spilling:
      slots-per-thread: 0x200
    feeder-rarely-used:
      disable: false
      gain-threshold: 10
  memory-optimization:
    disable-eliminate-barriers: false
    reordering:
      # reordering can change the order of memory accesses including atomics
      disable: false
      # is reordering of two read only is allowed.
      # for safe x86 like behavior non-atomic-only
      read-only: all
      # is reordering of two memory accesses that do not overlap is allowed
      # for safe x86 like behavior non-atomic-only
      non-alias: all
    coalescing:
      disable: false
      max-size-byte: 16
      enable-heuristic-alignment-optimization: false
  super-unsafe:
    # for research. don't turn on unless you know what you are doing
    enable-unsafe-remove-memread-cond: false

# Original (report_tool)
optimizer:
#  blacklist-functions:
#  - foo
#  - bar
# abs-topo-lim should have different value depending on optimization usage
# Value should be larger then 'topology-min-counter' below
# When optimizing function: use number that is <= to your number of test.
#   10k is recommended but if the func is slow, you can lower it to 1k
# For full apps: 30k is a good number to start with.
#   For fine tuning, use report tool to create CSV file.
#   look at 'loops loads' for better estimated value
  abs-topo-lim: 30000
  call-inline-factor: 0.005
  check-load-except-intervals: 100000
  collect-counters-duration: 10000000
  consolidate-unlikely:
    min-lower-lim: 10
    prob-lim-loop-edge: 0.8
    prob-lim: 0.9
    prob-lower-lim: 0.02
  fast-mode: true
  inline-validity-threshold: 0.0
  merge-limit: 0.001
  minimal-print: false
  new-counters-interval: 10000000
  new-counters-validity: 0.0
  simple-optimization-stop-ratio: 1000
  topo-lim-factor: 0.01
  topology-min-counter: 1000
  topology-min-duration-factor: 1.5
  allow-exit-paths: false

# Modern (elrond_core)
optimizer-pi:
  millable-functions: []
    # Optimizer will skip mills which are not from those functions, ignore if empty.
    # format is Muid_Zuid or debug name
  unmillable-functions: []
    # Optimizer will skip mills which are from those functions.
    # format is Muid_Zuid or debug name
  inline-blacklist-functions: []
    # - Muid_Zuid
  import-blacklist-functions: []
    # - Muid_Zuid
  blacklist-mills: []
    # - "<func_name>: <bbg_id>" (note the quotes, they are a MUST)
    # - "main: 33"
    # - "step_10: 9"
  small-mill-limit: 1
  use-unoptimized: false
  draft-mills: none
  loop-flattening:
    enabled: false
    # total number of MEPs in outer head and epilogue
    memory-access-threshold: 0
    # total number of LEs in outer head and epilogue
    compute-nodes-threshold: 200
  discovery:
    # Ignore this much time of the application's initial telemetry
    noise-skip-ms: 5000
    # Start sending for imports only after accumulating at least this much
    # application-telemetry-time.
    initial-data-ms: 10000
    # Minimum time, in milliseconds, for which requested telemetry must be
    # collected after the final import request (i.e. no new import requests being
    # made since the most recent one's completion) to advance to inline stage
    import-stable-ms: 10000

    # Any discovery telemetry less than this is completely discarded:
    #   max(max_importable_func_load / threshold_factor, threshold_minimum)
    # This is a noise-cancellation mechanism.
    import-threshold-minimum: 100000
    import-threshold-factor: 4096
  plan:
    inline-threshold-minimum: 100000
    inline-threshold-factor: 4096
    mill-threshold-minimum: 100000
    mill-threshold-factor: 4096
    merge-threshold-minimum: 100000
    merge-threshold-factor: 4096
    mill-iter-threshold: 1000.0
    likely-hint-factor: 0.5
  refine:
    unlikely-edge-ratio: 1024
    bbg-load-ratio: 100
  # Can be used to disable break commutative (uncomment):
  # disable-break-commutative: true
  # Can be used to disable feeder spilling (uncomment):
  # disable-feeder-spilling: true
  # Can be used to disable inlining order calls (uncomment):
  # disable-inline-order-call: true
  # Enable reoptimize mode. True = reoptimize enabled, False = refine enabled.
  # Reoptimize mode means that all counters will be cleared on stage2 completion
  # and reoptimize will happen periodically (by the following config) or manually (cli)
  # enable-reoptimize: false
  # Time in seconds to trigger reoptimize
  # reoptimize-period: 300
  # Size of reoptimize phase cache
  # phase-cache-size: 10

